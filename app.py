import streamlit as st
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="üìò –°–º–µ—Ç–∞ –ø–æ –ø—Ä–∞–π—Å—É", page_icon="üìò", layout="wide")

st.title("üìò –°–º–µ—Ç–∞ –ø–æ –ø—Ä–∞–π—Å—É")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ **CSV** –∏–ª–∏ **Excel (.xlsx)**, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
uploaded = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç", type=["csv", "xlsx"])

if uploaded:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    try:
        if uploaded.name.endswith(".csv"):
            df = pd.read_csv(uploaded)
        else:
            df = pd.read_excel(uploaded)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        st.stop()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    required_cols = {'–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '—Ü–µ–Ω–∞', '–µ–¥ –∏–∑–º'}
    if not required_cols.issubset(df.columns):
        st.error("‚ùå –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '—Ü–µ–Ω–∞', '–µ–¥ –∏–∑–º' (–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ').")
        st.stop()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = df.get('–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', '').fillna('')
    df['–∫–ª—é—á'] = df.apply(
        lambda r: f"{r['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']} | {r['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ']}" if r['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ'] else r['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
        axis=1
    )

    price_lookup = df.set_index('–∫–ª—é—á')['—Ü–µ–Ω–∞'].to_dict()
    unit_lookup = df.set_index('–∫–ª—é—á')['–µ–¥ –∏–∑–º'].to_dict()

    st.success("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π ---
    st.subheader("üßæ –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–º–µ—Ç—ã")

    names = list(price_lookup.keys())
    selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø—Ä–∞–π—Å–∞:", names)

    markup = st.number_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É (%)", value=11.0, step=0.5)

    total = 0
    rows = []

    for name in selected:
        unit = unit_lookup.get(name, "—à—Ç")
        price = price_lookup.get(name, 0)
        qty = st.number_input(f"{name} ({unit})", min_value=0.0, step=1.0, value=1.0, key=name)

        subtotal = price * qty
        total += subtotal
        rows.append({
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
            "–ï–¥. –∏–∑–º": unit,
            "–ö–æ–ª-–≤–æ": qty,
            "–¶–µ–Ω–∞": price,
            "–°—É–º–º–∞": subtotal
        })

    # --- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    if rows:
        st.divider()
        smeta_df = pd.DataFrame(rows)
        smeta_df['–°—É–º–º–∞'] = smeta_df['–°—É–º–º–∞'].round(0)
        smeta_df['–¶–µ–Ω–∞'] = smeta_df['–¶–µ–Ω–∞'].round(0)

        st.subheader("üìã –°–º–µ—Ç–∞")
        st.dataframe(smeta_df, use_container_width=True)

        total_final = total * (1 + markup / 100)
        st.markdown(f"### üí∞ –ò—Ç–æ–≥–æ –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏: **{total:,.0f} ‚Ç∏**")
        st.markdown(f"### üí∞ –ò—Ç–æ–≥–æ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π {markup:.1f}%: **{total_final:,.0f} ‚Ç∏**")

        # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        csv = smeta_df.to_csv(index=False).encode('utf-8-sig')
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Å–º–µ—Ç—É (CSV)",
            data=csv,
            file_name="smeta.csv",
            mime="text/csv"
        )
    else:
        st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")

else:
    st.info("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ XLSX-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")
